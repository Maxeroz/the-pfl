"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8402],{98402:function(n,e,t){t.d(e,{Z:function(){return O}});var o={};t.r(o),t.d(o,{create:function(){return A},list:function(){return R},pgFunctionArrayZod:function(){return _},pgFunctionCreateZod:function(){return y},pgFunctionDeleteZod:function(){return z},pgFunctionOptionalZod:function(){return h},pgFunctionUpdateZod:function(){return I},pgFunctionZod:function(){return E},remove:function(){return S},retrieve:function(){return T},update:function(){return L}});var a=t(56124);let r='\n-- Can\'t use pg_authid here since some managed Postgres providers don\'t expose it\n-- https://github.com/supabase/postgres-meta/issues/212\n\nselect\n  r.oid :: int8 as id,\n  rolname as name,\n  rolsuper as "isSuperuser",\n  rolcreatedb as "canCreateDb",\n  rolcreaterole as "canCreateRole",\n  rolinherit as "inheritRole",\n  rolcanlogin as "canLogin",\n  rolreplication as "isReplicationRole",\n  rolbypassrls as "canBypassRls",\n  (\n    select\n      count(*)\n    from\n      pg_stat_activity\n    where\n      r.rolname = pg_stat_activity.usename\n  ) as "activeConnections",\n  case when rolconnlimit = -1 then current_setting(\'max_connections\') :: int8\n       else rolconnlimit\n  end as "connectionLimit",\n  rolvaliduntil as "validUntil",\n  coalesce(r_config.role_configs, \'{}\') as config\nfrom\n  pg_roles r\n  left join (\n    select\n      oid,\n      jsonb_object_agg(param, value) filter (where param is not null) as role_configs\n    from\n      (\n        select\n          oid,\n          (string_to_array(unnest(rolconfig), \'=\'))[1] as param,\n          (string_to_array(unnest(rolconfig), \'=\'))[2] as value\n        from\n          pg_roles\n      ) as _\n    group by\n      oid\n  ) r_config on r_config.oid = r.oid\n';var i=t(30195);let c=i.z.object({id:i.z.number(),name:i.z.string(),isSuperuser:i.z.boolean(),canCreateDb:i.z.boolean(),canCreateRole:i.z.boolean(),inheritRole:i.z.boolean(),canLogin:i.z.boolean(),isReplicationRole:i.z.boolean(),canBypassRls:i.z.boolean(),activeConnections:i.z.number(),connectionLimit:i.z.number(),validUntil:i.z.union([i.z.string(),i.z.null()]),config:i.z.record(i.z.string(),i.z.string())}),s=i.z.array(c),l=i.z.optional(c),d=["information_schema","pg_catalog","pg_toast"],u="\n-- Adapted from information_schema.schemata\n\nselect\n  n.oid::int8 as id,\n  n.nspname as name,\n  u.rolname as owner\nfrom\n  pg_namespace n,\n  pg_roles u\nwhere\n  n.nspowner = u.oid\n  and (\n    pg_has_role(n.nspowner, 'USAGE')\n    or has_schema_privilege(n.oid, 'CREATE, USAGE')\n  )\n  and not pg_catalog.starts_with(n.nspname, 'pg_temp_')\n  and not pg_catalog.starts_with(n.nspname, 'pg_toast_temp_')\n",f=i.z.object({id:i.z.number(),name:i.z.string(),owner:i.z.string()}),p=i.z.array(f),g=i.z.optional(f),m="\n-- CTE with sane arg_modes, arg_names, and arg_types.\n-- All three are always of the same length.\n-- All three include all args, including OUT and TABLE args.\nwith functions as (\n  select\n    *,\n    -- proargmodes is null when all arg modes are IN\n    coalesce(\n      p.proargmodes,\n      array_fill('i'::text, array[cardinality(coalesce(p.proallargtypes, p.proargtypes))])\n    ) as arg_modes,\n    -- proargnames is null when all args are unnamed\n    coalesce(\n      p.proargnames,\n      array_fill(''::text, array[cardinality(coalesce(p.proallargtypes, p.proargtypes))])\n    ) as arg_names,\n    -- proallargtypes is null when all arg modes are IN\n    coalesce(p.proallargtypes, p.proargtypes) as arg_types,\n    array_cat(\n      array_fill(false, array[pronargs - pronargdefaults]),\n      array_fill(true, array[pronargdefaults])) as arg_has_defaults\n  from\n    pg_proc as p\n  where\n    p.prokind = 'f'\n)\nselect\n  f.oid::int8 as id,\n  n.nspname as schema,\n  f.proname as name,\n  l.lanname as language,\n  case\n    when l.lanname = 'internal' then ''\n    else f.prosrc\n  end as definition,\n  case\n    when l.lanname = 'internal' then f.prosrc\n    else pg_get_functiondef(f.oid)\n  end as complete_statement,\n  coalesce(f_args.args, '[]') as args,\n  pg_get_function_arguments(f.oid) as argument_types,\n  pg_get_function_identity_arguments(f.oid) as identity_argument_types,\n  f.prorettype::int8 as return_type_id,\n  pg_get_function_result(f.oid) as return_type,\n  nullif(rt.typrelid::int8, 0) as return_type_relation_id,\n  f.proretset as is_set_returning_function,\n  case\n    when f.provolatile = 'i' then 'IMMUTABLE'\n    when f.provolatile = 's' then 'STABLE'\n    when f.provolatile = 'v' then 'VOLATILE'\n  end as behavior,\n  f.prosecdef as security_definer,\n  f_config.config_params as config_params\nfrom\n  functions f\n  left join pg_namespace n on f.pronamespace = n.oid\n  left join pg_language l on f.prolang = l.oid\n  left join pg_type rt on rt.oid = f.prorettype\n  left join (\n    select\n      oid,\n      jsonb_object_agg(param, value) filter (where param is not null) as config_params\n    from\n      (\n        select\n          oid,\n          (string_to_array(unnest(proconfig), '='))[1] as param,\n          (string_to_array(unnest(proconfig), '='))[2] as value\n        from\n          functions\n      ) as t\n    group by\n      oid\n  ) f_config on f_config.oid = f.oid\n  left join (\n    select\n      oid,\n      jsonb_agg(jsonb_build_object(\n        'mode', t2.mode,\n        'name', name,\n        'type_id', type_id,\n        'has_default', has_default\n      )) as args\n    from\n      (\n        select\n          oid,\n          unnest(arg_modes) as mode,\n          unnest(arg_names) as name,\n          unnest(arg_types)::int8 as type_id,\n          unnest(arg_has_defaults) as has_default\n        from\n          functions\n      ) as t1,\n      lateral (\n        select\n          case\n            when t1.mode = 'i' then 'in'\n            when t1.mode = 'o' then 'out'\n            when t1.mode = 'b' then 'inout'\n            when t1.mode = 'v' then 'variadic'\n            else 'table'\n          end as mode\n      ) as t2\n    group by\n      t1.oid\n  ) f_args on f_args.oid = f.oid\n",E=i.z.object({id:i.z.number(),schema:i.z.string(),name:i.z.string(),language:i.z.string(),definition:i.z.string(),complete_statement:i.z.string(),args:i.z.array(i.z.object({mode:i.z.union([i.z.literal("in"),i.z.literal("out"),i.z.literal("inout"),i.z.literal("variadic"),i.z.literal("table")]),name:i.z.string(),type_id:i.z.number(),has_default:i.z.boolean()})),argument_types:i.z.string(),identity_argument_types:i.z.string(),return_type_id:i.z.number(),return_type:i.z.string(),return_type_relation_id:i.z.union([i.z.number(),i.z.null()]),is_set_returning_function:i.z.boolean(),behavior:i.z.union([i.z.literal("IMMUTABLE"),i.z.literal("STABLE"),i.z.literal("VOLATILE")]),security_definer:i.z.boolean(),config_params:i.z.union([i.z.record(i.z.string(),i.z.string()),i.z.null()])}),_=i.z.array(E),h=i.z.optional(E);function R(){var n,e;let{includeSystemSchemas:t=!1,includedSchemas:o,excludedSchemas:r,limit:i,offset:c}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s="\n    with f as (\n      ".concat(m,"\n    )\n    select\n      f.*\n    from f\n  "),l=(n=r,((e=t?void 0:d)&&(n=e.concat(null!=n?n:[])),null==o?void 0:o.length)?"IN (".concat(o.map(a.i0).join(","),")"):(null==n?void 0:n.length)?"NOT IN (".concat(n.map(a.i0).join(","),")"):"");return l&&(s+=" where schema ".concat(l)),i&&(s="".concat(s," limit ").concat(i)),c&&(s="".concat(s," offset ").concat(c)),{sql:s,zod:_}}function T(n){let{id:e,name:t,schema:o="public",args:r=[]}=n;if(e)return{sql:"\n      with f as (\n        ".concat(m,"\n      )\n      select\n        f.*\n      from f where id = ").concat((0,a.i0)(e),";"),zod:h};if(t&&o&&r)return{sql:"with f as (\n      ".concat(m,"\n    )\n    select\n      f.*\n    from f join pg_proc as p on id = p.oid where schema = ").concat((0,a.i0)(o)," and name = ").concat((0,a.i0)(t)," and p.proargtypes::text = ").concat(r.length?"(\n          select string_agg(type_oid::text, ' ') from (\n            select (\n              split_args.arr[\n                array_length(\n                  split_args.arr,\n                  1\n                )\n              ]::regtype::oid\n            ) as type_oid from (\n              select string_to_array(\n                unnest(\n                  array[".concat(r.map(a.i0),"]\n                ),\n                ' '\n              ) as arr\n            ) as split_args\n          ) args\n        )"):(0,a.i0)("")),zod:h};throw Error("Must provide either id or name and schema")}let y=i.z.object({name:i.z.string(),definition:i.z.string(),args:i.z.array(i.z.string()).optional(),behavior:i.z.enum(["IMMUTABLE","STABLE","VOLATILE"]).optional(),config_params:i.z.record(i.z.string(),i.z.string()).optional(),schema:i.z.string().optional(),language:i.z.string().optional(),return_type:i.z.string().optional(),security_definer:i.z.boolean().optional()});function N(n){let{name:e,schema:t,args:o,definition:r,return_type:i,language:c,behavior:s,security_definer:l,config_params:d}=n,{replace:u=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"\n    CREATE ".concat(u?"OR REPLACE":""," FUNCTION ").concat((0,a.yR)(t),".").concat((0,a.yR)(e),"(").concat((null==o?void 0:o.join(", "))||"",")\n    RETURNS ").concat(i,"\n    AS ").concat((0,a.i0)(r),"\n    LANGUAGE ").concat(c,"\n    ").concat(s,"\n    CALLED ON NULL INPUT\n    ").concat(l?"SECURITY DEFINER":"SECURITY INVOKER","\n    ").concat(d?Object.entries(d).map(n=>{let[e,t]=n;return"SET ".concat(e," ").concat("FROM CURRENT"===t[0]?"FROM CURRENT":"TO "+t)}).join("\n"):"",";\n  ")}function A(n){let{name:e,schema:t="public",args:o=[],definition:a,return_type:r="void",language:c="sql",behavior:s="VOLATILE",security_definer:l=!1,config_params:d={}}=n;return{sql:N({name:e,schema:t,args:o,definition:a,return_type:r,language:c,behavior:s,security_definer:l,config_params:d}),zod:i.z.void()}}let I=i.z.object({name:i.z.string().optional(),schema:i.z.string().optional(),definition:i.z.string().optional()});function L(n,e){var t;let{name:o,schema:r,definition:c}=e,s=n.argument_types.split(", "),l=n.identity_argument_types,d="string"==typeof c?N({...n,definition:c,args:s,config_params:null!==(t=n.config_params)&&void 0!==t?t:{}},{replace:!0}):"",u=o&&o!==n.name?"ALTER FUNCTION ".concat((0,a.yR)(n.schema),".").concat((0,a.yR)(n.name),"(").concat(l,") RENAME TO ").concat((0,a.yR)(o),";"):"",f=r&&r!==n.schema?"ALTER FUNCTION ".concat((0,a.yR)(n.schema),".").concat((0,a.yR)(o||n.name),"(").concat(l,")  SET SCHEMA ").concat((0,a.yR)(r),";"):"";return{sql:"\n    DO LANGUAGE plpgsql $$\n    BEGIN\n      IF ".concat("string"==typeof c?"TRUE":"FALSE"," THEN\n        ").concat(d,"\n\n        IF (\n          SELECT id\n          FROM (").concat(m,") AS f\n          WHERE f.schema = ").concat((0,a.i0)(n.schema),"\n          AND f.name = ").concat((0,a.i0)(n.name),"\n          AND f.identity_argument_types = ").concat((0,a.i0)(l),"\n        ) != ").concat(n.id," THEN\n          RAISE EXCEPTION 'Cannot find function \"").concat(n.schema,'"."').concat(n.name,'"(').concat(l,")';\n        END IF;\n      END IF;\n\n      ").concat(u,"\n\n      ").concat(f,"\n    END;\n    $$;\n  "),zod:i.z.void()}}let z=i.z.object({cascade:i.z.boolean().default(!1).optional()});function S(n){let{cascade:e=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return{sql:"DROP FUNCTION ".concat((0,a.yR)(n.schema),".").concat((0,a.yR)(n.name),"\n  (").concat(n.identity_argument_types,")\n  ").concat(e?"CASCADE":"RESTRICT",";"),zod:i.z.void()}}var O={roles:{list:function(){let{includeDefaultRoles:n=!1,limit:e,offset:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o="\nwith\n  roles as (".concat(r,")\nselect\n  *\nfrom\n  roles\nwhere\n  true\n");return n||(o+=" and not pg_catalog.starts_with(name, 'pg_')"),e&&(o+=" limit ".concat(e)),t&&(o+=" offset ".concat(t)),{sql:o,zod:s}},retrieve:function(n){let{id:e,name:t}=n;return e?{sql:"".concat(r," where r.oid = ").concat((0,a.i0)(e),";"),zod:l}:{sql:"".concat(r," where rolname = ").concat((0,a.i0)(t),";"),zod:l}},create:function(n){let{name:e,isSuperuser:t=!1,canCreateDb:o=!1,canCreateRole:r=!1,inheritRole:i=!0,canLogin:c=!1,isReplicationRole:s=!1,canBypassRls:l=!1,connectionLimit:d=-1,password:u,validUntil:f,memberOf:p=[],members:g=[],admins:m=[],config:E={}}=n;return{sql:"\ncreate role ".concat((0,a.yR)(e),"\n  ").concat(t?"superuser":"","\n  ").concat(o?"createdb":"","\n  ").concat(r?"createrole":"","\n  ").concat(i?"":"noinherit","\n  ").concat(c?"login":"","\n  ").concat(s?"replication":"","\n  ").concat(l?"bypassrls":"","\n  connection limit ").concat(d,"\n  ").concat(void 0===u?"":"password ".concat((0,a.i0)(u)),"\n  ").concat(void 0===f?"":"valid until ".concat((0,a.i0)(f)),"\n  ").concat(0===p.length?"":"in role ".concat(p.map(a.yR).join(",")),"\n  ").concat(0===g.length?"":"role ".concat(g.map(a.yR).join(",")),"\n  ").concat(0===m.length?"":"admin ".concat(m.map(a.yR).join(",")),"\n  ;\n").concat(Object.entries(E).map(n=>{let[t,o]=n;return"alter role ".concat((0,a.yR)(e)," set ").concat((0,a.yR)(t)," = ").concat((0,a.i0)(o),";")}).join("\n"),"\n")}},update:function(n,e){let{id:t,name:o}=n,{name:r,isSuperuser:i,canCreateDb:c,canCreateRole:s,inheritRole:l,canLogin:d,isReplicationRole:u,canBypassRls:f,connectionLimit:p,password:g,validUntil:m}=e;return{sql:"\ndo $$\ndeclare\n  id oid := ".concat(void 0===t?"".concat((0,a.i0)(o),"::regrole"):(0,a.i0)(t),";\n  old record;\nbegin\n  select * into old from pg_roles where oid = id;\n  if old is null then\n    raise exception 'Cannot find role with id %', id;\n  end if;\n\n  execute(format('alter role %I\n    ").concat(void 0===i?"":i?"superuser":"nosuperuser","\n    ").concat(void 0===c?"":c?"createdb":"nocreatedb","\n    ").concat(void 0===s?"":s?"createrole":"nocreaterole","\n    ").concat(void 0===l?"":l?"inherit":"noinherit","\n    ").concat(void 0===d?"":d?"login":"nologin","\n    ").concat(void 0===u?"":u?"replication":"noreplication","\n    ").concat(void 0===f?"":f?"bypassrls":"nobypassrls","\n    ").concat(void 0===p?"":"connection limit ".concat((0,a.i0)(p)),"\n    ").concat(void 0===g?"":"password ".concat((0,a.i0)(g)),"\n    ").concat(void 0===m?"":"valid until ".concat((0,a.i0)(m)),"\n  ', old.rolname));\n\n  ").concat(void 0===r?"":"\n  -- Using the same name in the rename clause gives an error, so only do it if the new name is different.\n  if new_name != old.nspname then\n    execute(format('alter role %I rename to ".concat((0,a.yR)(r),";', old.nspname));\n  end if;\n  "),"\nend\n$$;\n")}},remove:function(n){let{id:e,name:t}=n,{ifExists:o=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return{sql:"\ndo $$\ndeclare\n  id oid := ".concat(void 0===e?"".concat((0,a.i0)(t),"::regrole"):(0,a.i0)(e),";\n  old record;\nbegin\n  select * into old from pg_roles where oid = id;\n  if old is null then\n    raise exception 'Cannot find role with id %', id;\n  end if;\n\n  execute(format('drop role ").concat(o?"if exists":""," %I;', old.rolname));\nend\n$$;\n")}},zod:c},schemas:{list:function(){let{includeSystemSchemas:n=!1,limit:e,offset:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=u;return n||(o="".concat(o," and not (n.nspname in (").concat(d.map(a.i0).join(","),"))")),e&&(o="".concat(o," limit ").concat(e)),t&&(o="".concat(o," offset ").concat(t)),{sql:o,zod:p}},retrieve:function(n){let{id:e,name:t}=n;return e?{sql:"".concat(u," and n.oid = ").concat((0,a.i0)(e),";"),zod:g}:{sql:"".concat(u," and n.nspname = ").concat((0,a.i0)(t),";"),zod:g}},create:function(n){let{name:e,owner:t}=n;return{sql:"create schema ".concat((0,a.yR)(e),"\n  ").concat(void 0===t?"":"authorization ".concat((0,a.yR)(t)),";\n")}},update:function(n,e){let{id:t,name:o}=n,{name:r,owner:i}=e;return{sql:"\ndo $$\ndeclare\n  id oid := ".concat(void 0===t?"".concat((0,a.i0)(o),"::regnamespace"):(0,a.i0)(t),";\n  old record;\n  new_name text := ").concat(void 0===r?null:(0,a.i0)(r),";\n  new_owner text := ").concat(void 0===i?null:(0,a.i0)(i),";\nbegin\n  select * into old from pg_namespace where oid = id;\n  if old is null then\n    raise exception 'Cannot find schema with id %', id;\n  end if;\n\n  if new_owner is not null then\n    execute(format('alter schema %I owner to %I;', old.nspname, new_owner));\n  end if;\n\n  -- Using the same name in the rename clause gives an error, so only do it if the new name is different.\n  if new_name is not null and new_name != old.nspname then\n    execute(format('alter schema %I rename to %I;', old.nspname, new_name));\n  end if;\nend\n$$;\n")}},remove:function(n){let{id:e,name:t}=n,{cascade:o=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return{sql:"\ndo $$\ndeclare\n  id oid := ".concat(void 0===e?"".concat((0,a.i0)(t),"::regnamespace"):(0,a.i0)(e),";\n  old record;\n  cascade bool := ").concat((0,a.i0)(o),";\nbegin\n  select * into old from pg_namespace where oid = id;\n  if old is null then\n    raise exception 'Cannot find schema with id %', id;\n  end if;\n\n  execute(format('drop schema %I %s;', old.nspname, case when cascade then 'cascade' else 'restrict' end));\nend\n$$;\n")}},zod:f},functions:o}},56124:function(n,e,t){t.d(e,{WU:function(){return s},yR:function(){return i},i0:function(){return c}});let o=new Set(["AES128","AES256","ALL","ALLOWOVERWRITE","ANALYSE","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASYMMETRIC","AUTHORIZATION","BACKUP","BETWEEN","BINARY","BLANKSASNULL","BOTH","BYTEDICT","CASE","CAST","CHECK","COLLATE","COLUMN","CONSTRAINT","CREATE","CREDENTIALS","CROSS","CURRENT_CATALOG","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURRENT_USER_ID","DEFAULT","DEFERRABLE","DEFLATE","DEFRAG","DELTA","DELTA32K","DESC","DISABLE","DISTINCT","DO","ELSE","EMPTYASNULL","ENABLE","ENCODE","ENCRYPT","ENCRYPTION","END","EXCEPT","EXPLICIT","FALSE","FETCH","FOR","FOREIGN","FREEZE","FROM","FULL","GLOBALDICT256","GLOBALDICT64K","GRANT","GROUP","GZIP","HAVING","IDENTITY","IGNORE","ILIKE","IN","INITIALLY","INNER","INTERSECT","INTO","IS","ISNULL","JOIN","LATERAL","LEADING","LEFT","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","LUN","LUNS","LZO","LZOP","MINUS","MOSTLY13","MOSTLY32","MOSTLY8","NATURAL","NEW","NOT","NOTNULL","NULL","NULLS","OFF","OFFLINE","OFFSET","OLD","ON","ONLY","OPEN","OR","ORDER","OUTER","OVERLAPS","PARALLEL","PARTITION","PERCENT","PLACING","PRIMARY","RAW","READRATIO","RECOVER","REFERENCES","REJECTLOG","RESORT","RESTORE","RETURNING","RIGHT","SELECT","SESSION_USER","SIMILAR","SOME","SYMMETRIC","SYSDATE","SYSTEM","TABLE","TAG","TDES","TEXT255","TEXT32K","THEN","TO","TOP","TRAILING","TRUE","TRUNCATECOLUMNS","UNION","UNIQUE","USER","USING","VARIADIC","VERBOSE","WALLET","WHEN","WHERE","WINDOW","WITH","WITHOUT"]);function a(n){return n.replace("T"," ").replace("Z","+00")}function r(n,e,t){let o="";for(let[a,r]of(o+=n?" (":"(",e.entries()))o+=(0===a?"":", ")+t(r);return o+")"}function i(n){if(null==n)throw Error("SQL identifier cannot be null or undefined");if(!1===n)return'"f"';if(!0===n)return'"t"';if(n instanceof Date)return'"'.concat(a(n.toISOString()),'"');if(Array.isArray(n)){let e=[];for(let t of n){if(!0===Array.isArray(t))throw TypeError("Nested array to grouped list conversion is not supported for SQL identifier");e.push(i(t))}return e.toString()}if(n===Object(n))throw Error("SQL identifier cannot be an object");let e=String(n).slice(0);if(!0===/^[_a-z][\d$_a-z]*$/.test(e)&&!1==!!o.has(e.toUpperCase()))return e;let t='"';for(let n of e)t+='"'===n?n+n:n;return t+'"'}function c(n){let e,t="";if(null==n)return"NULL";if("bigint"==typeof n)return BigInt(n).toString();if(n===Number.POSITIVE_INFINITY)return"'Infinity'";if(n===Number.NEGATIVE_INFINITY)return"'-Infinity'";if(Number.isNaN(n))return"'NaN'";if("number"==typeof n)return Number(n).toString();if(!1===n)return"'f'";if(!0===n)return"'t'";if(n instanceof Date)return"'".concat(a(n.toISOString()),"'");if(Array.isArray(n)){let e=[];for(let[t,o]of n.entries())!0===Array.isArray(o)?e.push(r(0!==t,o,c)):e.push(c(o));return e.toString()}n===Object(n)?(e="jsonb",t=JSON.stringify(n)):t=String(n).slice(0);let o=!1,i="'";for(let n of t)"'"===n?i+=n+n:"\\"===n?(i+=n+n,o=!0):i+=n;return i+="'",!0===o&&(i="E".concat(i)),e&&(i+="::".concat(e)),i}function s(n){for(var e=arguments.length,t=Array(e>1?e-1:0),o=1;o<e;o++)t[o-1]=arguments[o];return function(n,e){let t=0,o="%(%|(\\d+\\$)?[",s=RegExp(o+="ILs])","g");return n.replace(s,(n,o)=>{if("%"===o)return"%";let s=t,l=o.split("$");if(l.length>1&&(s=Number.parseInt(l[0],10)-1,o=l[1]),s<0)throw Error("specified argument 0 but arguments start at 1");if(s>e.length-1)throw Error("too few arguments");return(t=s+1,"I"===o)?i(e[s]):"L"===o?c(e[s]):"s"===o?function n(e){if(null==e)return"";if(!1===e)return"f";if(!0===e)return"t";if(e instanceof Date)return a(e.toISOString());if(Array.isArray(e)){let t=[];for(let[o,a]of e.entries())null!=a&&(!0===Array.isArray(a)?t.push(r(0!==o,a,n)):t.push(n(a)));return t.toString()}return e===Object(e)?JSON.stringify(e):String(e).toString().slice(0)}(e[s]):void 0})}(n,t)}}}]);